services:
  frontend:
    container_name: tyf_frontend
    build:
      context: ./../
      dockerfile: ./.docker/dev/Dockerfile.frontend.dev
    command: "sh -c 'cd frontend && npm run serve'"
    volumes:
      - ./../frontend:/frontend
    ports:
      - 8080:8080
    depends_on:
      backend:
        condition: service_started
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  backend:
    container_name: tyf_backend
    build:
      context: ./../
      dockerfile: ./.docker/dev/Dockerfile.backend.dev
    command: python backend/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./../backend:/tyf/backend
    ports:
      - 8000:8000
    env_file:
      - ./dev/conf/.env.dev
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  database:
    container_name: tyf_postgres
    image: postgres:13.0-alpine
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data/
      - ./dev/conf/init.sql:/docker-entrypoint-initdb.d/init.sql 
    ports:
      - 5432:5432
    env_file:
      - ./dev/conf/.env.dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis:
    container_name: tyf_redis
    image: redis:latest
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-server --daemonize yes && sleep 1 && redis-cli ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # worker:
  #   container_name: tyf_worker
  #   build:
  #     context: ./../
  #     dockerfile: ./.docker/dev/Dockerfile.backend.dev
  #   command: celery -A backend.apps.celery_app worker --loglevel=info
  #   env_file:
  #     - ./dev/.env.dev
  #   volumes:
  #     - ./../backend:/tyf/backend/apps/celery_app
  #   depends_on:
  #     - beat
  #     - redis

  beat:
    container_name: tyf_beat
    restart: unless-stopped
    build:
      context: ./../
      dockerfile: ./.docker/dev/Dockerfile.backend.dev
    command: "sh /tyf/celery.sh"
    env_file:
      - ./dev/conf/.env.dev
    ports:
      - 7999:7999
    depends_on:
      - database
      - redis
      - backend

volumes:
  postgres_data_dev:

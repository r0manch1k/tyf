services:
  # -------------------- MAIN SERVICES --------------------

  nginx:
    container_name: tyf_nginx
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.nginx.prod
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - static_files:/tyf/backend/staticfiles/
      - media_files:/tyf/backend/mediafiles/
    env_file:
      - ./prod/conf/.env.prod
    depends_on:
      backend:
        condition: service_started
      grafana:
        condition: service_started
    networks:
      - nginx_network

  backend:
    container_name: tyf_backend
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.backend.prod
    command: "sh /tyf/gunicorn.sh"
    volumes:
      - static_files:/tyf/backend/staticfiles/
      - media_files:/tyf/backend/mediafiles/
    expose:
      - 8000
    env_file:
      - ./prod/conf/.env.prod
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - nginx_network
      - backend_network
      - metrics_network

  database:
    container_name: tyf_postgres
    image: postgres:13.0-alpine
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
      - ./prod/conf/init.sql:/docker-entrypoint-initdb.d/init.sql
    expose:
      - 5432
    env_file:
      - ./prod/conf/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tyf_admin -d tyf"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend_network
      - metrics_network

  redis:
    container_name: tyf_redis
    restart: unless-stopped
    env_file:
      - ./prod/conf/.env.prod
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.redis.prod
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    expose:
      - 6379
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-server --daemonize yes && sleep 1 && redis-cli ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend_network
      - metrics_network

  celery:
    container_name: tyf_celery
    restart: unless-stopped
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.backend.prod
    command: "sh /tyf/celery.sh"
    env_file:
      - ./prod/conf/.env.prod
    expose:
      - 7999
    depends_on:
      - database
      - redis
      - backend
    networks:
      - backend_network

  # -------------------- MONITORING SERVICES --------------------

  prometheus:
    container_name: tyf_prometheus
    image: prom/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    expose:
      - 9090
    volumes:
      - ./prod/conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/etc/prometheus/
    environment:
      TZ: "Asia/Vladivostok"
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
      database:
        condition: service_started
    networks:
      - metrics_network

  grafana:
    container_name: tyf_grafana
    image: grafana/grafana
    restart: unless-stopped
    command:
      - "--config=/etc/grafana/grafana.ini"
    volumes:
      - ./prod/conf/grafana.ini:/etc/grafana/grafana.ini
      - ./prod/grafana_dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_DASHBOARDS_JSON_ENABLED=true
      - GF_DASHBOARDS_JSON_PATH=/var/lib/grafana/dashboards
      - TZ=Asia/Vladivostok
    depends_on:
      prometheus:
        condition: service_started
    expose:
      - 3000
    networks:
      - nginx_network
      - metrics_network

volumes:
  postgres_data_prod:
  prometheus_data:
  grafana_data:
  static_files:
  media_files:

networks:
  metrics_network:
    driver: bridge
  nginx_network:
    driver: bridge
  backend_network:
    driver: bridge

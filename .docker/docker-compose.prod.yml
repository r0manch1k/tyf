services:
  # -------------------- MAIN SERVICES --------------------

  nginx:
    container_name: main__nginx
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.nginx.prod
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - static_files:/tyf/backend/staticfiles/
      - media_files:/tyf/backend/mediafiles/
    env_file:
      - ./prod/conf/.env.prod
    depends_on:
      - backend
      - grafana
    networks:
      - nginx_nw

  backend:
    container_name: main__backend
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.backend.prod
    command: "sh /tyf/gunicorn.sh"
    volumes:
      - static_files:/tyf/backend/staticfiles/
      - media_files:/tyf/backend/mediafiles/
    expose:
      - 8000
    env_file:
      - ./prod/conf/.env.prod
    depends_on:
      - database
      - redis
    restart: always
    networks:
      - nginx_nw
      - backend_nw
      - metrics_nw

  database:
    container_name: main__postgres
    image: postgres:13.0-alpine
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
      - ./prod/conf/init.sql:/docker-entrypoint-initdb.d/init.sql
    expose:
      - 5432
    env_file:
      - ./prod/conf/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tyf_admin -d tyf"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend_nw
      - metrics_nw

  redis:
    container_name: main__redis
    restart: unless-stopped
    env_file:
      - ./prod/conf/.env.prod
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.redis.prod
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    expose:
      - 6379
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-server --daemonize yes && sleep 1 && redis-cli ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend_nw
      - metrics_nw

  celery:
    container_name: main__celery
    restart: unless-stopped
    build:
      context: ./../
      dockerfile: ./.docker/prod/Dockerfile.backend.prod
    command: "sh /tyf/celery.sh"
    env_file:
      - ./prod/conf/.env.prod
    expose:
      - 7999
    depends_on:
      - database
      - redis
      - backend
    networks:
      - backend_nw
      - metrics_nw

  # -------------------- MONITORING SERVICES --------------------

  grafana:
    container_name: monitor__grafana
    image: grafana/grafana
    restart: unless-stopped
    command:
      - "--config=/etc/grafana/grafana.ini"
    volumes:
      - ./prod/conf/grafana.ini:/etc/grafana/grafana.ini
      - ./prod/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_DASHBOARDS_JSON_ENABLED=true
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - TZ=Asia/Vladivostok
    depends_on:
      - prometheus
    expose:
      - 3000
    networks:
      - nginx_nw
      - metrics_nw

  prometheus:
    container_name: monitor__prometheus
    image: prom/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=error"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=7d"
    expose:
      - 9090
    volumes:
      - ./prod/conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    environment:
      TZ: "Asia/Vladivostok"
    depends_on:
      - node-exporter
      - cadvisor
      - backend
      - redis
      - database
    networks:
      - metrics_nw

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: monitor__cadvisor
    privileged: true
    command: "-port=8092"
    expose:
      - 8092
    volumes:
      - /:/rootfs:ro
      - /var/run/:/var/run/:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - metrics_nw

  node-exporter:
    image: prom/node-exporter
    container_name: monitor__node-exporter
    restart: unless-stopped
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    expose:
      - 9100
    networks:
      - metrics_nw

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: monitor__postgres-exporter
    expose:
      - 9187
    env_file:
      - ./prod/conf/.ps_exporter.env
    networks:
      - metrics_nw
  
  redis-exporter:
    image: oliver006/redis_exporter
    container_name: monitor__redis-exporter
    expose:
      - 9121
    env_file:
      - ./prod/conf/.redis_exporter.env
    networks:
      - metrics_nw

volumes:
  postgres_data_prod:
  prometheus_data:
  grafana_data:
  static_files:
  media_files:

networks:
  metrics_nw:
    driver: bridge
  nginx_nw:
    driver: bridge
  backend_nw:
    driver: bridge
